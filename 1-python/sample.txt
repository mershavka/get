Я более чем уверена, что среди слушателей нашего курса есть как те, кто уже неплохо знаком с программированием, так и те, кто не написал ни одной компьютерной программы в своей жизни. Сегодня мы обсудим, зачем и кому вообще нужно программирование, как к нему подступиться и изучим некоторые основы языка Python на уровне, достаточном для решения прикладных задач, которые возникнут у вас при выполнении лабораторных работ.

Зачем учиться программированию?

Написание программ (или программирование) — это очень творческое, а также полезное занятие. Вы может писать программы по многим причинам, кто-то зарабатывает этим на жизни, кто-то решает сложные проблемы анализа данных, другие программируют просто ради веселья. Еще в 1981 году советский ученый А. П. Ершов выступил на конференции в Швейцарии с докладом «Программирование — вторая грамотность», что вскоре стало лозунгом. Сильная метафора, смысл которой заключается в том, что всего пару веков назад большинство населения земли не умели ни читать, ни писать, но развитие книгопечатания и появление станков привели к повсеместной грамотности, в наше время такая же закономерность прослеживается с ЭВМ и умением программировать. В 2к20 нелепо отрицать тот факт, что компьютерные технологии захватили наш мир и наши умы. В нашей повседневной жизни мы всюду окружены персональными компьютерами, ноутбуками, планшетами, смартфонами. Но часто младшекурсники попадают в ловушку следующего заблуждения: "Я пришел учиться физике, а не программированию, зачем оно мне, если я хочу заниматься наукой, а не IT". Когда я училась на первом курсе, я сама так думала. Но оказывается, что ни теоретику, ни экспериментатору в наши дни не обойтись без компьютеров и программ. Физические задачи, которые можно было полностью точно решить имея ручку и листок бумаги, решили еще сто лет назад. Сейчас практически в любой области физики необходимо использование численных методов, а это требует хотя бы минимального навыка программирования, даже если пользоваться готовыми библиотеками. А обработка экспериментальных данных вручную займет в миллион раз больше времени, если отказаться от использования программ.

Итак, компьютеры – это наши маленькие помощники, которым мы можем делегировать задачи, которые они способны решить быстрее и качественнее человека. Но чтобы использовать память и вычислительные мощности компьютеров, нужно научиться общаться с ними.

Почему Python?

Python является широко используемым, высокоуровневым языком программирования, он простой по своей структуре, и в то же время невероятно гибкий и мощный. Код Python легко читаемый и без излишней строгости в синтаксисе, поэтому он считается одним из лучших языков для начинающих программистов. Python – язык для любителей минимализма: если вы хотите написать программу, которая просто печатает одну строчку текста, то вот как выглядит ее код на трёх разных языках. Сравните количество и понятность строк кода.
“Java” справляется в 5 строк, используя множество скобок.

class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}
“C” работает похоже:

#include <stdio.h>
void main()
{
    printf("Hello world\n");
}
Python использует одну понятную строку.

print("Hello world")


Прежде чем приступить к программированию

При помощи языков программирования мы можем составлять инструкции для компьютера. Но для этого необходимо хотя бы на минимальном уровне понимать как устроены компьютеры. Если вы решите разобрать свой ноутбук или смартфон и заглянуть внутрь, то вы увидите примерно следующее:



Центральный процессор (ЦПУ, CPU) – это мозг компьютера, эта часть построена так, чтобы обрабатывать множество команд различных программ и постоянно спрашивать "Что дальше?". Если у вашего ноутбука или смартфона тактовая частота 3 ГГЦ, это значит, что ЦПУ 3 миллиона раз в секунду спрашивает, что делать дальше.
Оперативная память (ОЗУ)/Main memory/память с произвольным доступом (RAM)— это основное место хранения команд и данных текущих задач (программ). Оперативная память почти такая же быстрая, как и процессор. Но информация, хранящаяся в оперативной памяти, исчезает при выключении компьютера.
Постоянное запоминающее устройство (Secondary Memory, ПЗУ) - также используется для хранения информации, но работает намного медленнее, чем оперативная память. Данные, хранящиеся в ПЗУ, не могут быть изменены электронным способом после изготовления устройства памяти. Постоянная память полезна для хранения программного обеспечения, которое редко изменяется в течение срока службы системы, иногда называемого микропрограммой. Преимущество ПЗУ заключается в том, что она может хранить информацию даже при отключении питания компьютера. Примерами являются дисковые накопители.
Устройства ввода/вывода – это мыши, клавиатуры, экраны, тачпады, микрофоны, динамики и тд. С помощью них мы взаимодействуем с компьютером.
В наши дни большинство компьютеров также имеют сетевое соединение для получения информации по сети. Мы можем рассматривать сеть как очень медленное место для хранения и извлечения данных, которое не всегда доступно/работоспособно. Таким образом, в некотором смысле сеть представляет собой более медленную и временами ненадежную форму памяти.
Ваша задача как программиста состоит в том, чтобы использовать и согласовывать каждый из этих ресурсов для решения задач и анализа данных, которые вы получаете от решения. В основном вы будете «разговаривать» с процессором и указывать ему, что делать дальше. Иногда вы указываете процессору использовать оперативную память, постоянную память, сеть или устройства ввода / вывода. Для процессора вы будете именно тем человеком, кто отвечает на его вопрос "Что делать дальше?". Но как сообщить процессору, что вы хотите?  Для этого необходимо заранее написать набор инструкций, заданий, мы называем эти сохраненные инструкции программой, а процесс записи инструкций – программированием.

Диалог с Python

В отличие от человеческих языков (русского, английского и тд) вокабуляр или словарный запас пайтона крайне ограничен. Этот словарный запас языков программирования называют "зарезервированными словами". Зарезервированные слова в программе на python имеют особенный, конкретный, единственный смысл для Python. При написании программ вы создадите свои слова, которые будет иметь смысл уже для вас – переменные, вы не ограничены почти ничем в придумывании имен для своих переменных, кроме того, что вы не можете использовать зарезервированные слова. Вот их список:

and	def	false	in	or	with
as	del	for	is	pass	while
assert	elif	from	lambda	raise	yield
break	else	global	nonlocal	return	
class	except	if	None	True	
continue	finally	import	not	try	
Установка Python

По инструкции https://thecode.media/py-install/
Также, наверное, стоит показать установку на MacOS и Linux, хотя вполне возможно, что в них Python уже установлен и готов к использованию, поскольку он является стандартным компонентом этих операционных систем.

Линейки Python

Многие пользователи задаются вопросом, с какой версии Python следует начинать изучение данного языка. Выбор стоит между версиями Python 2 и 3, хотя, казалось бы, прошло больше 10 лет с момента появления новой линейки. Следует иметь в виду, что Python 2.7 (последняя версия в 2.x) больше не разрабатывается. После 2020 года поддержка также прекратится окончательно. Важно понимать, что Python 3 несовместим с Python 2. Это обратная несовместимость. В результате для любой организации, которая использовала версию Python 2.x, миграция проекта на 3.x требовала большого количества изменений. Эти изменения касаются не только проектов и приложений, но и всех библиотек, которые являются частью экосистемы Python. Единственная мутация print из оператора в функцию без преувеличения нарушила работу почти всех написанных ранее программ Python. Хотя многие оценили Python З.Х как усовершенствование и как будущее Python, линейка Python 2.Х все еще очень широко использовалась и долго поддерживалась параллельно с линейкой Python З.Х. Большинство кода Python было написано с применением Python 2.Х и миграция на Python З.Х оказалась медленным процессом. Мы будем рассказывать про современную версию Python 3, но имейте в виду, что в работе, учебе или жизни вам может встретиться вторая линейка, поэтому будьте внимательны.

После установки

Откройте командную строку и напишите py (или python), нажмите enter. Вы увидите что-то похожее:

C:\Users\mershavka>py
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> - это способ интерпретатора Python спросить вас: «Что вы хотите, чтобы я сделал дальше?» Python готов к диалогу с вами. Все, что вам нужно знать, это как говорить на языке Python. Допустим, вы не знаете даже самых простых слов или предложений на языке Python. Вы можете захотеть сказать стандартную фразу, которую используют космонавты, когда они приземляются на далекую планету, и пытаются вступить в контакт с жителями планеты:

>>> Я пришла с миром, отведите меня к вашему лидеру
  File "<stdin>", line 1
    Я пришла с миром, отведите меня к вашему лидеру
      ^
SyntaxError: invalid syntax
Это никуда не годится, надеюсь, у вас есть справочник с собой, чтобы быстро найти подходящие слова. Кто знает, насколько дружелюбны жители планеты Python и что они с вами сделают, если вы срочно что-нибудь не предпримете. Попробуем так:

>>> print("Я пришла с миром, отведите меня к вашему лидеру")
Я пришла с миром, отведите меня к вашему лидеру
>>>
Ура! Это первое синтаксически верное предложение на языке Python. Оно начинается с функции print, аргументом которой является строка, заключенная в кавычки.
Чтобы закончить "беседу" с Python наберите quit().

Интерпретаторы и компиляторы

Python – это язык высокого уровня, относительно простой для чтения и написания программ людьми, а также для чтения и обработки компьютерами. Другими языками высокого уровня являются Java, C ++, PHP, Ruby, Basic, Perl, JavaScript и многие другие. Подвох в том, что ЦПУ не понимает ни один из высокоуровневых языков, он умеет читать только так называемый машинный код, состоящий из нулей и единиц (записанных в Hex). Его кажущаяся простота обманчива, писать на машинном коде слишком трудно и энергозатратно, поэтому почти никто в мире не пишет программы на машинном языке, вместо этого создаются переводчики, позволяющие программистам писать на языках высокого уровня, таких как Python или JavaScript, и эти переводчики преобразуют программы в машинный язык для фактического выполнения ЦП. Поскольку машинный код жестко привязан к аппаратному обеспечению компьютера, он не переносится на различные типы оборудования. Программы, написанные на языках высокого уровня, можно перемещать между разными компьютерами, используя другой интерпретатор на новой машине или перекомпилировав код для создания версии программы на машинном языке для новой машины. Эти переводчики языков программирования делятся на две общие категории:

интерпретаторы
компиляторы
Компилятор (англ. compiler - составитель, собиратель) читает всю программу целиком, делает ее перевод и создает законченный вариант программы на машинном языке, который затем и выполняется. Результат работы компилятора — бинарный исполняемый файл.

Интерпретатор (англ. interpreter - истолкователь, устный переводчик) переводит и выполняет программу строка за строкой, то есть "на лету". 

После того, как программа откомпилирована, ни исходный текст программы, ни компилятор более не нужны для исполнения программы. В то же время программа, обрабатываемая интерпретатором, должна заново переводиться на машинный язык при каждом очередном запуске программы. То есть исходный файл является непосредственно исполняемым.

До сих пор мы говорили о Python как о языке программирования. Но в текущей реализации это еще и программный пакет, который называется интерпретатором. Интерпретатор – это такой модуль, который исполняет другие программы. Когда вы пишете код на языке Python, интерпретатор Python читает вашу программу и выполняет составляющие ее инструкции. По сути дела интерпретатор – это слой программной логики между вашим программным кодом и аппаратурой вашего компьютера.

Допустим, мы хотим запомнить некоторое число, чтобы использовать его через некоторое время.

>>> x = 6
>>> print(x)
6
>>> y = x * 7
>>> print(y)
42
>>>
Мы просим Python запомнить значение шесть и использовать переменную под именем x, чтобы мы могли получить значение позже. Мы проверяем, что Python действительно запомнил значение, используя print. Затем мы просим Python взять x, умножить его на семь и поместить вновь вычисленное значение в y. Затем мы просим Python распечатать текущее значение y. Несмотря на то, что мы вводим эти команды в Python по одной строке за раз, Python обрабатывает их как упорядоченную последовательность, при этом есть возможность обращаться к более ранним данным.

Мы написали наш первый простой "абзац" из четырех предложений в логическом и осмысленном порядке. У интерпретатора есть возможность вести как будто бы интерактивный разговор. Компилятору же необходимо передать всю программу в файле, а затем он запустит процесс для перевода исходного кода высокого уровня на машинный язык, после чего поместит полученный машинный код в файл для последующего выполнения. Часто эти исполняемые программы на машинном языке имеют суффикс «.exe» или «.dll», что означает «исполняемый файл» (экзешник) и «библиотека динамической компоновки» (дэ-эл-эл-ка) соответственно. В Linux и Macintosh нет суффикса, который однозначно отмечает файл как исполняемый. Попробуйте открыть любой исполняемый файл в блокноте, вы увидите, что это что-то фантастически нечитабельное. Как хорошо, что существуют высокоуровневые языки программирования!

После всех этих историй об интерпретаторах и компиляторах у вас наверняка назрел вопрос о самом интерпретаторе Python. На каком языке он написан? На компилируемом языке или нет? Когда мы набираем «python», что именно происходит?
Интерпретатор Python написан на языке высокого уровня под названием «C». Вы можете посмотреть фактический исходный код интерпретатора Python, перейдя на сайт www.python.org. Итак, Python - это программа, и она скомпилирована в машинный код. Когда вы установили Python на свой компьютер, вы скопировали копию машинного кода переведенной программы Python в свою систему. В Windows исполняемый машинный код для самого Python, скорее всего, находится в файле с именем python.exe. 

Написание программ

Ввод команд в интерпретатор Python через командную строку – отличный способ поэкспериментировать с функциями Python, но для решения более сложных задач такой подход не удобен. Когда мы хотим написать программу, мы используем текстовый редактор для записи инструкций Python в файл, который называется скриптом. По соглашению имена скриптов Python заканчиваются на .py. Вы заметите, что нет необходимости использовать quit() в конце программы Python в файле. Когда Python читает ваш исходный код из файла, он знает, что нужно остановиться, когда достигнет конца файла.

Программу лучше всего воспринимать через проблему или задачу, которая перед вами стоит. Допустим, вы хотите провести исследование на тему, какое слово чаще всего встречается в постах физтехов, которые они публикуют в социальных сетях. Но сколько придется прочитать страниц для этого, кажется, это отнимет много времени и будет велика вероятность ошибки. К счастью существует программирование, компьютеры однозначно лучше справляются с такого рода задачами. К счастью, программа для поиска наиболее часто встречающегося слова уже написана: https://www.py4e.com/code3/words.py. 

name = input('Enter file:')
handle = open(name, 'r') #функция для открытия файла с параметром 'r' - открытие на чтение (является значением по умолчанию)
counts = dict() #создание словаря - неупорядоченной коллекции произвольных объектов с доступом по ключу

for line in handle:
	words = line.split()
	for word in words:
		counts[word] = counts.get(word, 0) + 1 #dict.get(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None)

bigcount = None
bigword = None
for word, count in list(counts.items()):
	if bigcount is None or count > bigcount:
		bigword = word
		bigcount = count

print(bigword, bigcount)
Вам даже не нужно знать Python, чтобы использовать эту программу. Вы - конечный пользователь, вы просто используете программу и восхищаетесь ее лаконичностью и тем, как она сэкономила вам силы. Вы просто вводите код в файл с именем words.py и запускаете его.
Это хороший пример того, как Python и язык Python действуют как посредники между вами (конечным пользователем) и другими людьми (программистами). Python - это способ обмениваться полезными последовательностями инструкций (то есть программами) на общем языке, который может использовать любой, кто устанавливает Python на свой компьютер. Итак, на самом деле никто из нас не разговаривает с Python, вместо этого мы общаемся друг с другом через Python.

Ввод-вывод в Python

Для считывания строки со стандартного ввода используется функция input(), которая считывает строку с клавиатуры и возвращает значение считанной строки, которое сразу же можно присвоить переменным:

a = input()
b = input("Введите b:")
Правда, функция input возвращает текстовую строку. Если нужно сделать так, чтобы переменные имели численные значения, то сразу же после считывания выполним преобразование типов при помощи фунцкии int/float, и запишем новые значения в переменные a и b:

a = int(a)
b = float(b)
Можно объединить считывание строк и преобразование типов, если вызывать функцию int для того значения, которое вернет функция input():

a = int(input())
b = float(input())
Сложнее считать значения переменных, если они записаны в отдельной строке. Здесь нужно применить к считанной строке метод split(), который разделяет строку на части по одному или двум пробелам. Затем результат выполнения этой функции присвоим кортежу из двух или нескольких чисел. Например, если в строке вводятся два числа через пробел, то считать их можно так:

a, b, c = input().split()
a = int(a)
b = float(b)
Можно также сразу же преобразовать считанные значения в числовой тип (например, int), если воспользоваться функцией map, которая применяет к каждому элементу списка заданную функцию (для преобразования к типу int нужно, соответственно, задать функцию int для применения к каждому элементу). Для начала можно просто запомнить эту конструкцию:

a, b, c = map(int, input().split())
Для вывода данных используется функция print(), с которой мы уже встречались ранее. print() может выводить не только значения переменных, но и значения любых выражений. Например, допустима запись print(2 + 2 * 2). Также при помощи функции print можно выводить значение не одного, а нескольких выражений, для этого нужно перечислить их через запятую: 

a = 1 
b = 2 
print(a, '+', b, '=', a + b)
Обратите внимание, выводимые значение разделяются одним пробелом. Но такое поведение можно изменить: можно разделять выводимые значения двумя пробелами, любым другим символом, любой другой строкой, выводить их в отдельных строках или не разделять никак. Для этого нужно функции print передать специальный именованный параметр, называемый sep, равный строке, используемый в качестве разделителя (sep —  от слова separator, т.е. разделитель). По умолчанию параметр sep равен строке из одного пробела и между значениями выводится пробел. Чтобы использовать в качестве разделителя, например, символ двоеточия нужно передать параметр sep, равный строке ‘:’:



Задача: скачать из интернета файлы

Одной из сфер, в которой Python занял уверенную позицию, является веб-разработка. При решении различных задач в сфере веб-разработки, нам часто приходится взаимодействовать с HTTP – сетевым протоколом, с начала 90-х и по сей день позволяющим вашему браузеру загружать веб-страницы. Библиотека requests позволяет нам легко и с минимальным количеством кода взаимодействовать с веб-приложениями. Это необходимо нам для решения любых задач, связанных с передачей информации от пользователя к серверу и обратно. На данный момент она является одной из самых популярных библиотек на github: более 40 000 "звёзд" и используется более, чем в 20 000 open-source проектах. Для работы с примерами мы будем использовать два способа: работа в командной строке и написание скриптов в .py-файлах для их дальнейшего запуска. Для начала, поскольку библиотека является внешней, нам необходимо её установить. Делается это очень просто в командной строке:

pip3 install requests
Продолжим использовать консоль. После установки в нашем расположении введем команду python, после чего проверим установку, произведя импорт:

>>> import requests 
Теперь все готово для постановки и решения первой задачи. Допустим, мы хотим скачать с какого-нибудь сайта фотографии или иные файлы, если их достаточно много, то эта процедура будет достаточно долгой и утомительной для того, чтобы выполнять это руками. Представьте, что нужно скачать 1000 фотографий, как вы это сделаете? 

Подготовительное задание

Получаем ответ от сайта
Первое, что мы сделаем - проверим статус-код ресурса. Иными словами: узнаем, работает ли сайт. Для этого мы создадим простой запрос GET.  Проверим, что возвращает нам данный запрос: Как мы можем видеть, в качестве ответа мы получили объект класса Response и код 200. Этот код говорит, что ресурс работает и можно с ним взаимодействовать.

>>> r = requests.get('https://mipt.ru/')
>>> r
<Response [200]>


Скачиваем картинку с сайта
В этом примере мы будем применять всё тот же запрос GET, но, в отличие от предыдущего, мы будем работать с содержимым ответа. После выполнения данного скрипта, мы увидим новое изображение под названием new_image.png в директории, из которой у нас запущен скрипт.После выполнения данного скрипта, мы увидим новое изображение под названием new_image.png в директории, из которой у нас запущен скрипт.

>>> import requests
>>> image = requests.get('https://mipt.ru/upload/iblock/bb0/dsc_3648_edit_2.jpg')
>>> with open('new_image.png', 'wb') as f:
...       f.write(image.content)
